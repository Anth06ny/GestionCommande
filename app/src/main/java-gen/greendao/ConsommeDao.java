package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Consomme;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONSOMME.
*/
public class ConsommeDao extends AbstractDao<Consomme, Long> {

    public static final String TABLENAME = "CONSOMME";

    /**
     * Properties of entity Consomme.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Quantite = new Property(1, Long.class, "quantite", false, "QUANTITE");
        public final static Property Produit = new Property(2, Long.class, "produit", false, "PRODUIT");
        public final static Property Consomme = new Property(3, Long.class, "consomme", false, "CONSOMME");
    };

    private Query<Consomme> commande_CommandeRefQuery;
    private Query<Consomme> produit_ProduitRefQuery;

    public ConsommeDao(DaoConfig config) {
        super(config);
    }
    
    public ConsommeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONSOMME' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QUANTITE' INTEGER," + // 1: quantite
                "'PRODUIT' INTEGER," + // 2: produit
                "'CONSOMME' INTEGER);"); // 3: consomme
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONSOMME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Consomme entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long quantite = entity.getQuantite();
        if (quantite != null) {
            stmt.bindLong(2, quantite);
        }
 
        Long produit = entity.getProduit();
        if (produit != null) {
            stmt.bindLong(3, produit);
        }
 
        Long consomme = entity.getConsomme();
        if (consomme != null) {
            stmt.bindLong(4, consomme);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Consomme readEntity(Cursor cursor, int offset) {
        Consomme entity = new Consomme( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // quantite
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // produit
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // consomme
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Consomme entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuantite(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProduit(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setConsomme(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Consomme entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Consomme entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "commandeRef" to-many relationship of Commande. */
    public List<Consomme> _queryCommande_CommandeRef(Long produit) {
        synchronized (this) {
            if (commande_CommandeRefQuery == null) {
                QueryBuilder<Consomme> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Produit.eq(null));
                commande_CommandeRefQuery = queryBuilder.build();
            }
        }
        Query<Consomme> query = commande_CommandeRefQuery.forCurrentThread();
        query.setParameter(0, produit);
        return query.list();
    }

    /** Internal query to resolve the "produitRef" to-many relationship of Produit. */
    public List<Consomme> _queryProduit_ProduitRef(Long consomme) {
        synchronized (this) {
            if (produit_ProduitRefQuery == null) {
                QueryBuilder<Consomme> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Consomme.eq(null));
                produit_ProduitRefQuery = queryBuilder.build();
            }
        }
        Query<Consomme> query = produit_ProduitRefQuery.forCurrentThread();
        query.setParameter(0, consomme);
        return query.list();
    }

}
