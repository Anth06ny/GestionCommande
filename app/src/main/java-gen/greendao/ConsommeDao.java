package greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Consomme;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONSOMME.
*/
public class ConsommeDao extends AbstractDao<Consomme, Long> {

    public static final String TABLENAME = "CONSOMME";

    /**
     * Properties of entity Consomme.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Quantite = new Property(1, Long.class, "quantite", false, "QUANTITE");
        public final static Property Produit = new Property(2, Long.class, "produit", false, "PRODUIT");
        public final static Property Commande = new Property(3, Long.class, "commande", false, "COMMANDE");
    };

    private DaoSession daoSession;

    private Query<Consomme> commande_CommandeRefQuery;
    private Query<Consomme> produit_ProduitRefQuery;

    public ConsommeDao(DaoConfig config) {
        super(config);
    }
    
    public ConsommeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONSOMME' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QUANTITE' INTEGER," + // 1: quantite
                "'PRODUIT' INTEGER," + // 2: produit
                "'COMMANDE' INTEGER);"); // 3: commande
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONSOMME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Consomme entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long quantite = entity.getQuantite();
        if (quantite != null) {
            stmt.bindLong(2, quantite);
        }
 
        Long produit = entity.getProduit();
        if (produit != null) {
            stmt.bindLong(3, produit);
        }
 
        Long commande = entity.getCommande();
        if (commande != null) {
            stmt.bindLong(4, commande);
        }
    }

    @Override
    protected void attachEntity(Consomme entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Consomme readEntity(Cursor cursor, int offset) {
        Consomme entity = new Consomme( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // quantite
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // produit
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // commande
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Consomme entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuantite(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProduit(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCommande(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Consomme entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Consomme entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "commandeRef" to-many relationship of Commande. */
    public List<Consomme> _queryCommande_CommandeRef(Long produit) {
        synchronized (this) {
            if (commande_CommandeRefQuery == null) {
                QueryBuilder<Consomme> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Produit.eq(null));
                commande_CommandeRefQuery = queryBuilder.build();
            }
        }
        Query<Consomme> query = commande_CommandeRefQuery.forCurrentThread();
        query.setParameter(0, produit);
        return query.list();
    }

    /** Internal query to resolve the "produitRef" to-many relationship of Produit. */
    public List<Consomme> _queryProduit_ProduitRef(Long commande) {
        synchronized (this) {
            if (produit_ProduitRefQuery == null) {
                QueryBuilder<Consomme> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Commande.eq(null));
                produit_ProduitRefQuery = queryBuilder.build();
            }
        }
        Query<Consomme> query = produit_ProduitRefQuery.forCurrentThread();
        query.setParameter(0, commande);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProduitDao().getAllColumns());
            builder.append(" FROM CONSOMME T");
            builder.append(" LEFT JOIN PRODUIT T0 ON T.'PRODUIT'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Consomme loadCurrentDeep(Cursor cursor, boolean lock) {
        Consomme entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Produit produitRef = loadCurrentOther(daoSession.getProduitDao(), cursor, offset);
        entity.setProduitRef(produitRef);

        return entity;    
    }

    public Consomme loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Consomme> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Consomme> list = new ArrayList<Consomme>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Consomme> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Consomme> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
