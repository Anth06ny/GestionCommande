package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Produit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUIT.
*/
public class ProduitDao extends AbstractDao<Produit, Long> {

    public static final String TABLENAME = "PRODUIT";

    /**
     * Properties of entity Produit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nom = new Property(1, String.class, "nom", false, "NOM");
        public final static Property Prix = new Property(2, Float.class, "prix", false, "PRIX");
        public final static Property Lot = new Property(3, Integer.class, "lot", false, "LOT");
        public final static Property Cosommation = new Property(4, Integer.class, "cosommation", false, "COSOMMATION");
    };


    public ProduitDao(DaoConfig config) {
        super(config);
    }
    
    public ProduitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUIT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOM' TEXT," + // 1: nom
                "'PRIX' REAL," + // 2: prix
                "'LOT' INTEGER," + // 3: lot
                "'COSOMMATION' INTEGER);"); // 4: cosommation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUIT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Produit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nom = entity.getNom();
        if (nom != null) {
            stmt.bindString(2, nom);
        }
 
        Float prix = entity.getPrix();
        if (prix != null) {
            stmt.bindDouble(3, prix);
        }
 
        Integer lot = entity.getLot();
        if (lot != null) {
            stmt.bindLong(4, lot);
        }
 
        Integer cosommation = entity.getCosommation();
        if (cosommation != null) {
            stmt.bindLong(5, cosommation);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Produit readEntity(Cursor cursor, int offset) {
        Produit entity = new Produit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nom
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // prix
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // lot
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // cosommation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Produit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrix(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setLot(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCosommation(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Produit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Produit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
