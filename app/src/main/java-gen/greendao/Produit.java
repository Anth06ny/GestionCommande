package greendao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table PRODUIT.
 */
public class Produit {

    private Long id;
    private String nom;
    private Float prix;
    private Integer lot;
    private Integer consommation;
    private Boolean favori;
    private long CategorieID;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient ProduitDao myDao;

    private Categorie categorie;
    private Long categorie__resolvedKey;

    private List<Consomme> produitRef;

    // KEEP FIELDS - put your custom fields here
    private Boolean isSelected = false;
    private int quantite;//Pour la note
    private int lotRecommande = 0;
    // KEEP FIELDS END

    public Produit() {
    }

    public Produit(Long id) {
        this.id = id;
    }

    public Produit(Long id, String nom, Float prix, Integer lot, Integer consommation, Boolean favori, long CategorieID) {
        this.id = id;
        this.nom = nom;
        this.prix = prix;
        this.lot = lot;
        this.consommation = consommation;
        this.favori = favori;
        this.CategorieID = CategorieID;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProduitDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public Float getPrix() {
        return prix;
    }

    public void setPrix(Float prix) {
        this.prix = prix;
    }

    public Integer getLot() {
        return lot;
    }

    public void setLot(Integer lot) {
        this.lot = lot;
    }

    public Integer getConsommation() {
        return consommation;
    }

    public void setConsommation(Integer consommation) {
        this.consommation = consommation;
    }

    public Boolean getFavori() {
        return favori;
    }

    public void setFavori(Boolean favori) {
        this.favori = favori;
    }

    public long getCategorieID() {
        return CategorieID;
    }

    public void setCategorieID(long CategorieID) {
        this.CategorieID = CategorieID;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public Categorie getCategorie() {
        long __key = this.CategorieID;
        if (categorie__resolvedKey == null || !categorie__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategorieDao targetDao = daoSession.getCategorieDao();
            Categorie categorieNew = targetDao.load(__key);
            synchronized (this) {
                categorie = categorieNew;
                categorie__resolvedKey = __key;
            }
        }
        return categorie;
    }

    public void setCategorie(Categorie categorie) {
        if (categorie == null) {
            throw new DaoException("To-one property 'CategorieID' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.categorie = categorie;
            CategorieID = categorie.getId();
            categorie__resolvedKey = CategorieID;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<Consomme> getProduitRef() {
        if (produitRef == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ConsommeDao targetDao = daoSession.getConsommeDao();
            List<Consomme> produitRefNew = targetDao._queryProduit_ProduitRef(id);
            synchronized (this) {
                if (produitRef == null) {
                    produitRef = produitRefNew;
                }
            }
        }
        return produitRef;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetProduitRef() {
        produitRef = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public Boolean isSelected() {
        return isSelected;
    }

    public void setSelected(Boolean selected) {
        isSelected = selected;
    }

    public int getQuantite() {
        return quantite;
    }

    public void setQuantite(int quantite) {
        this.quantite = quantite;
    }

    public int getLotRecommande() {
        return lotRecommande;
    }

    public void setLotRecommande(int lotRecommande) {
        this.lotRecommande = lotRecommande;
    }
    // KEEP METHODS END
}
