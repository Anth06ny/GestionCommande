package greendao;

import greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PRODUIT.
 */
public class Produit {

    private Long id;
    private String nom;
    private Float prix;
    private Integer lot;
    private Integer cosommation;
    private Long CategorieID;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProduitDao myDao;

    private Categorie categorie;
    private Long categorie__resolvedKey;


    public Produit() {
    }

    public Produit(Long id) {
        this.id = id;
    }

    public Produit(Long id, String nom, Float prix, Integer lot, Integer cosommation, Long CategorieID) {
        this.id = id;
        this.nom = nom;
        this.prix = prix;
        this.lot = lot;
        this.cosommation = cosommation;
        this.CategorieID = CategorieID;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProduitDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNom() {
        return nom;
    }

    public void setNom(String nom) {
        this.nom = nom;
    }

    public Float getPrix() {
        return prix;
    }

    public void setPrix(Float prix) {
        this.prix = prix;
    }

    public Integer getLot() {
        return lot;
    }

    public void setLot(Integer lot) {
        this.lot = lot;
    }

    public Integer getCosommation() {
        return cosommation;
    }

    public void setCosommation(Integer cosommation) {
        this.cosommation = cosommation;
    }

    public Long getCategorieID() {
        return CategorieID;
    }

    public void setCategorieID(Long CategorieID) {
        this.CategorieID = CategorieID;
    }

    /** To-one relationship, resolved on first access. */
    public Categorie getCategorie() {
        Long __key = this.CategorieID;
        if (categorie__resolvedKey == null || !categorie__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategorieDao targetDao = daoSession.getCategorieDao();
            Categorie categorieNew = targetDao.load(__key);
            synchronized (this) {
                categorie = categorieNew;
            	categorie__resolvedKey = __key;
            }
        }
        return categorie;
    }

    public void setCategorie(Categorie categorie) {
        synchronized (this) {
            this.categorie = categorie;
            CategorieID = categorie == null ? null : categorie.getId();
            categorie__resolvedKey = CategorieID;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
